Site : https://www.shadertoy.com/new

// Programme d'origine
/*
void mainImage( out vec4 fragColor, in vec2 fragCoord )
{
    // Normalized pixel coordinates (from 0 to 1)
    vec2 uv = fragCoord/iResolution.xy;

    // Time varying pixel color
    vec3 col = 0.5 + 0.5*cos(iTime+uv.xyx+vec3(0,2,4));

    // Output to screen
    fragColor = vec4(col,0.5);
}
*/

// Afficher la même couleur sur tout l'écran
/*
void mainImage( out vec4 fragColor, in vec2 fragCoord )
{
	vec3 col = vec3(0.5, 0.33, 0.25);
    fragColor = vec4(col, 1.0);
}
*/

// Affiche un dégradé de couleur de gauche à droite entre 2 couleurs
/*
void mainImage( out vec4 fragColor, in vec2 fragCoord )
{
    vec2 uv = fragCoord/iResolution.xy;
    
	vec3 colg = vec3(0, 0, 0);
    vec3 cold = vec3(1, 1, 1);
    
    vec3 col = colg * uv.x + cold * (1.0 - uv.x);
    
    fragColor = vec4(col, 1.0);
}
*/

// Affiche un dégradé de couleur à partir des 4 coins de l’image
/*
void mainImage( out vec4 fragColor, in vec2 fragCoord )
{
    vec2 uv = fragCoord/iResolution.xy;
    
    vec3 hg = vec3(1, 0, 0);
	vec3 hd = vec3(0, 1, 0);
    vec3 bg = vec3(0, 0, 1);
    vec3 bd = vec3(1, 1, 0);
    
    vec3 col = uv.x * hd +
        (1. - uv.x) * (1. - uv.y) * bg +
        uv.x * (1. - uv.y) * bd +
        (1. - uv.x) * uv.y * hg;
    
    fragColor = vec4(col, 1.0);
}
*/

// Affiche un dégradé radial à partir du centre de l’image
/*
void mainImage( out vec4 fragColor, in vec2 fragCoord )
{
    // Normalized pixel coordinates (from 0 to 1)
    vec2 uv = fragCoord/iResolution.xy;

    // Time varying pixel color
    vec3 col = vec3(1, 1, 1) * distance(fragCoord, iResolution.xy/2.) / iResolution*2. +
               vec3(0, 0, 1) * distance(fragCoord, iResolution.xy/2.) * iResolution*2.;

    // Output to screen
    fragColor = vec4(col, 1.);
}
*/

